// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SponsorCategories {
  sponsor
  intro
  outro
  interaction
  selfpromo
  music_offtopic
  preview
  filler
  //undocumented types found while backfilling:
  moreCategories
  poi_highlight
  exclusive_access
  chapter
}

model SponsorTimes {
  UUID           String            @id @db.VarChar(38)
  category       SponsorCategories
  videoID        String            @db.VarChar(11)
  startTime      Float            
  endTime        Float             
  votes          Int?
  locked         Boolean?
  incorrectVotes Int?              
  userID         String?           @db.VarChar(38)
  timeSubmitted  DateTime?         
  views          Int?
  actionType     String?           
  service        String?
  videoDuration  Float?            
  hidden         Boolean?
  reputation     Float?            
  shadowHidden   Boolean?          
  hashedVideoID  String?           @db.VarChar(64)
  userAgent      String?           
  description    String?

  // videoInfo Video? @relation(fields: [videoID], references: [videoID])
  // transcript SponsorTranscript? 
  @@index([videoID])
}
