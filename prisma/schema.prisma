// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgresql"
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  //referentialIntegrity = "prisma"
  relationMode = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  SponsorTypes               SponsorTypes[]
  UserSponsorVotes           UserSponsorVotes[]
  Transcripts                Transcripts[]
  TranscriptDetails          TranscriptDetails[]
  // UserTranscriptVotes        UserTranscriptVotes[]
  UserTranscriptDetailsVotes UserTranscriptDetailsVotes[]
  Bot                        Bots?
}

model Bots {
  id               String     @id
  model            String
  temperature      Float?
  maxTokens        Int?
  topP             Float?
  frequencyPenalty Float?
  presencePenalty  Float?
  User             User       @relation(fields: [id], references: [id])
  BotQueue         BotQueue[]

  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SponsorCategories {
  sponsor
  intro
  outro
  interaction
  selfpromo
  music_offtopic
  preview
  filler
  //undocumented types found while backfilling:
  moreCategories
  poi_highlight
  exclusive_access
  chapter
}

model SponsorTimes {
  UUID           String            @id
  category       SponsorCategories
  videoID        String            @db.VarChar(11)
  startTime      Float
  endTime        Float
  votes          Int?
  locked         Boolean?
  incorrectVotes Int?
  userID         String? //@db.VarChar(38)
  timeSubmitted  DateTime?
  views          Int?
  actionType     String?
  service        String?
  videoDuration  Float?
  hidden         Boolean?
  reputation     Float?
  shadowHidden   Boolean?
  hashedVideoID  String? //@db.VarChar(64)
  userAgent      String?
  description    String?

  Video       Videos?       @relation(fields: [videoID], references: [id])
  Transcripts Transcripts[]

  @@index([UUID])
  @@index([videoID])
}

model Channels {
  id   String  @id
  name String?

  thumbnail String?

  Videos       Videos[]
  ChannelStats ChannelStats[] //may be overtime data
  ProcessQueue ProcessQueue[]

  @@index([id])
}

model ChannelStats {
  id                    String    @id @default(cuid())
  channelId             String
  videosProcessed       Int       @default(0)
  lastUpdated           DateTime  @default(now())
  processedTo           DateTime //datetime of latest video
  processedFrom         DateTime?
  numberVideosSponsored Int?
  totalSponsorSegments  Int?
  totalSponsorTime      Float?

  Channel Channels @relation(fields: [channelId], references: [id])

  @@unique([channelId, processedTo])
  @@index([channelId])
}

model Videos {
  id        String @id
  channelId String

  title           String?
  published       DateTime
  duration        Float?
  thumbnail       String?
  thumbnailHeight Int?
  thumbnailWidth  Int?

  SponsorSegments SponsorTimes[]
  Sponsors        Sponsors[]
  Channel         Channels       @relation(fields: [channelId], references: [id])
  BotQueue        BotQueue[]
  ProcessQueue    ProcessQueue[]

  @@index([id])
  @@index([channelId])
}

model Transcripts {
  id                String              @id @default(cuid())
  segmentUUID       String
  text              String              @db.Text
  textHash          String
  created           DateTime            @default(now())
  userId            String?
  score             Int                 @default(0)
  startTime         Float?
  endTime           Float?
  CreatedBy         User?               @relation(fields: [userId], references: [id])
  SponsorSegment    SponsorTimes        @relation(fields: [segmentUUID], references: [UUID])
  TranscriptDetails TranscriptDetails[]
  // UserTranscriptVotes UserTranscriptVotes[]
  BotQueue          BotQueue[]

  @@unique([segmentUUID, textHash])
  @@index([userId])
  @@index([segmentUUID])
  @@index([textHash])
  @@index([score(sort: Desc)])
}

//redundant with usertrancriptdetailsvotes - deprecating
// model UserTranscriptVotes {
//   id           Int    @id @default(autoincrement())
//   userId       String
//   transcriptId String
//   direction    Int    @default(0)

//   User      User        @relation(fields: [userId], references: [id])
//   Transcript Transcripts @relation(fields: [transcriptId], references: [id], onDelete: Cascade)

//   @@index([transcriptId])
//   @@index([userId])
// }

enum QueueStatus {
  pending
  partial
  completed
  error
}

model BotQueue {
  id           String      @id @default(cuid())
  videoId      String?
  transcriptId String
  botId        String
  status       QueueStatus @default(pending)

  timeInitialized DateTime  @default(now())
  lastUpdated     DateTime?

  responseId      String?
  promptTokens    Int?
  totalTokens     Int?
  rawResponseData Json?

  parentProcessId String?

  Transcript     Transcripts   @relation(fields: [transcriptId], references: [id])
  Video          Videos?       @relation(fields: [videoId], references: [id])
  Bot            Bots          @relation(fields: [botId], references: [id])
  ProcessQueue   ProcessQueue? @relation(fields: [processQueueId], references: [id])
  processQueueId String?

  @@unique([transcriptId, botId])
  @@index([transcriptId])
  @@index([botId])
  @@index([videoId])
  @@index([processQueueId])
}

enum ProcessType {
  video
  video_sponsors
  channel_videos
  channel_summary
}

model ProcessQueue {
  id              String      @id @default(cuid())
  parentProcessId String?
  status          QueueStatus
  type            ProcessType
  timeInitialized DateTime    @default(now())
  lastUpdated     DateTime?

  channelId String
  videoId   String? @default("")

  Channel  Channels?  @relation(fields: [channelId], references: [id])
  Video    Videos?    @relation(fields: [videoId], references: [id])
  BotQueue BotQueue[]

  @@unique([channelId, videoId, type])
  @@index([id])
  @@index([videoId])
  @@index([channelId])
}

model TranscriptDetails {
  id           String   @id @default(cuid())
  userId       String
  transcriptId String
  created      DateTime @default(now())
  score        Int      @default(0)

  CreatedBy   User                         @relation(fields: [userId], references: [id])
  Transcript  Transcripts                  @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  Votes       UserTranscriptDetailsVotes[]
  Annotations TranscriptAnnotations[]
  Sponsors    Sponsors[]

  @@unique([transcriptId, userId])
  @@index([userId])
  @@index([score(sort: Desc)])
}

model UserTranscriptDetailsVotes {
  id                  BigInt @id @default(autoincrement())
  userId              String
  transcriptDetailsId String
  direction           Int    @default(0)

  User              User              @relation(fields: [userId], references: [id])
  TranscriptDetails TranscriptDetails @relation(fields: [transcriptDetailsId], references: [id], onDelete: Cascade)

  @@unique([userId, transcriptDetailsId])
  @@index([userId])
  @@index([transcriptDetailsId])
}

enum AnnotationTags {
  BRAND
  PRODUCT
  OFFER
  URL
  CODE
}

model TranscriptAnnotations {
  id                  String         @id @default(cuid())
  start               Int
  end                 Int
  text                String
  tag                 AnnotationTags
  transcriptDetailsId String

  TranscriptDetails TranscriptDetails @relation(fields: [transcriptDetailsId], references: [id], onDelete: Cascade)

  @@index([transcriptDetailsId])
}

model Sponsors {
  id                  String  @id @default(cuid())
  videoId             String
  transcriptDetailsId String
  brand               String
  product             String?
  url                 String?
  code                String?
  type                BigInt?
  offer               String?
  locked              Boolean @default(false)

  Votes             UserSponsorVotes[]
  Video             Videos             @relation(fields: [videoId], references: [id])
  TranscriptDetails TranscriptDetails? @relation(fields: [transcriptDetailsId], references: [id])
  SponsorType       SponsorTypes?      @relation(fields: [type], references: [id])

  @@unique([videoId, brand])
  @@index([videoId])
  @@index([brand])
  @@index([transcriptDetailsId])
  @@index([type])
}

model UserSponsorVotes {
  id         BigInt @id @default(autoincrement())
  userId     String
  sponsorsId String
  direction  Int    @default(0)

  User     User     @relation(fields: [userId], references: [id])
  Sponsors Sponsors @relation(fields: [sponsorsId], references: [id])

  @@index([userId])
  @@index([sponsorsId])
}

model SponsorTypes {
  id      BigInt  @id @default(autoincrement())
  type    String  @unique
  active  Boolean @default(true)
  userId  String?
  pending Boolean @default(false)

  CreatedBy User?      @relation(fields: [userId], references: [id])
  Sponsors  Sponsors[]

  @@index([userId])
}
