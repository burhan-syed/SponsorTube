import Head from "next/head";
import { useRouter } from "next/router";
import { trpc } from "../utils/trpc";
import useSponsorBlock from "../hooks/useSponsorBlock";
import useVideoCaptions from "../hooks/useVideoCaptions";
import Header from "../components/ui/Header";
import VideoInfo from "../components/ui/VideoInfo";
import VideoEmbed from "../components/ui/VideoEmbed";
import type { NextPage } from "next";

const Home: NextPage = () => {
  const router = useRouter();
  const { v } = router.query;
  const videoID = (Array.isArray(v) ? v?.[0] : v) ?? "";
  const sponsors = useSponsorBlock({ videoID });
  const videoInfo = trpc.video.info.useQuery(
    { videoID },
    {
      enabled: !!videoID,
      refetchOnMount: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
    }
  );

  const captions = useVideoCaptions({
    captionsURL: videoInfo.data?.captions.caption_tracks?.[0]?.base_url ?? "",
  });

  console.log("videoInfos:", sponsors.data, videoInfo.data, captions.data);
  return (
    <>
      <Head>
        <title>Video</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="p-4">
        {sponsors.isLoading ? (
          <>{"loading.."}</>
        ) : sponsors.data ? (
          <pre className="max-w-screen truncate">
            {JSON.stringify(sponsors.data)}
          </pre>
        ) : sponsors.error ? (
          "error"
        ) : (
          "something went wrong"
        )}
        {videoInfo.isLoading ? (
          <>{"loading.."}</>
        ) : videoInfo.data ? (
          <>
            {videoInfo.data.basic_info.embed?.iframe_url && (
              <VideoEmbed
                styles="outline-none w-full"
                iFrameSrc={videoInfo.data.basic_info.embed?.iframe_url}
                width={videoInfo.data.basic_info.embed?.width}
                height={videoInfo.data.basic_info.embed?.height}
              />
            )}
            <VideoInfo
              title={videoInfo.data.basic_info.title}
              views={videoInfo.data.basic_info.view_count}
              likes={videoInfo.data.basic_info.like_count}
              description={videoInfo.data.basic_info.short_description}
              descriptionRuns={videoInfo.data.basic_info.description?.runs}
              uploadDate={videoInfo.data.basic_info.upload_date}
              channelName={videoInfo.data.basic_info.channel.name}
              channelID={videoInfo.data.basic_info.channel_id}
              channelSubscribers={
                videoInfo.data.basic_info.channel.subscriber_count
              }
              channelThumbnail={videoInfo.data.basic_info.channel.thumbnail}
              channelIsVerified={videoInfo.data.basic_info.channel.is_verified}
              channelIsVerifiedArtist={
                videoInfo.data.basic_info.channel.is_verified_artist
              }
              channelURL={videoInfo.data.basic_info.channel.url}
            />
          </>
        ) : videoInfo.error ? (
          "error"
        ) : (
          "something went wrong"
        )}
        {/* <button
          type="button"
          disabled={!videoInfo.data?.captions.caption_tracks?.[0]?.base_url}
          onClick={() =>
            videoInfo.data?.captions.caption_tracks?.[0]?.base_url &&
            getCaptions.mutate({
              captionURL:
                videoInfo.data?.captions.caption_tracks?.[0]?.base_url,
            })
          }
        >
          get mutations
        </button> */}
      </main>
    </>
  );
};

export default Home;
